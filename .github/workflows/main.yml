name: Docker Image CI

on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  push:
    branches: [ development ]
  pull_request:
    branches: [ development ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
          node-version: 12
          registry-url: https://registry.npmjs.org/
    - 
      name: Install
      id: Install
      run: | 
        npm install
        npm run build
    -
      name: Get version
      id: prepare
      run: |
        DOCKER_IMAGE=ceruleandatahub/stratosphere
        # DOCKER_PLATFORMS=linux/amd64,linux/arm64
        VERSION=edge
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
        fi
        TAGS="--tag ${DOCKER_IMAGE}:${VERSION}"
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          TAGS="$TAGS --tag ${DOCKER_IMAGE}:latest"
        fi
        echo ::set-output name=docker_image::${DOCKER_IMAGE}
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
          --build-arg VERSION=${VERSION} \
          --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
          --build-arg VCS_REF=${GITHUB_SHA::8} \
          ${TAGS} --file Dockerfile .
    - 
      name: Set up Docker Buildx
      uses: crazy-max/ghaction-docker-buildx@v3
    -
      name: Docker Buildx (build)
      run: |
        docker buildx build --no-cache --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args }}
    -
      name: Docker Login
      if: success() && github.event_name != 'pull_request'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
    -
      name: Docker Buildx (push)
      id: push
      if: success() && github.event_name != 'pull_request'
      run: |
        docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
