# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - development

pr: none

resources:
  - repo: self

variables:
  - group: IoT-Platform-Admin

stages:
  - stage: Build
    displayName: Build and push stage
    jobs:
      - job: getVersionNumber
        displayName: get version number
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - bash: |
              set -e
              VERSION=$(jq '.version' < package.json | sed 's/"//g')
              echo "##vso[task.setvariable variable=version;isOutput=true]$VERSION"
            name: getVersionNumber
      - job: Build
        displayName: Build
        dependsOn: getVersionNumber
        pool:
          vmImage: "ubuntu-latest"
        variables:
          versionNumber: $[ dependencies.getVersionNumber.outputs['getVersionNumber.version'] ]
        steps:
          - task: Npm@1
            inputs:
              customEndpoint: Azure artifacts NPM
          - bash: |
              set -e
              npm install
              npm run build
            name: buildImage
          - task: Docker@2
            displayName: Build and push an image to container registry
            inputs:
              command: buildAndPush
              repository: $(imageRepository)
              dockerfile: "$(Build.SourcesDirectory)/Dockerfile"
              containerRegistry: $(dockerRegistryServiceConnection)
              tags: |
                $(versionNumber)
      - job: Tag
        displayName: Git tag version number
        dependsOn: getVersionNumber
        pool:
          vmImage: "ubuntu-latest"
        variables:
          versionNumber: $[ dependencies.getVersionNumber.outputs['getVersionNumber.version'] ]
        steps:
          - checkout: self
            persistCredentials: true
          - bash: |
              set -e
              git config --global user.name "BuildService"
              git config --global user.email "BuildService@houston-inc.com"
              git tag -a $(versionNumber) -m "new version $(versionNumber)" -f
              git tag
              git push origin $(versionNumber) -f
            name: gitTagVersion
